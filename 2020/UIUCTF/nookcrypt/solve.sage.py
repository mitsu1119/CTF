

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0xf31ce7cb1f2c6e7107318d76bdda50c5 = Integer(0xf31ce7cb1f2c6e7107318d76bdda50c5); _sage_const_0x02d979fc3122bbaffcc1111953bc184f = Integer(0x02d979fc3122bbaffcc1111953bc184f); _sage_const_0x77e035861860b2983de922db1bd78f97 = Integer(0x77e035861860b2983de922db1bd78f97); _sage_const_0xf9729a3afef0fd168948269fb696022c = Integer(0xf9729a3afef0fd168948269fb696022c); _sage_const_0x4cf5afcc9bc1db0118172129b713d86a = Integer(0x4cf5afcc9bc1db0118172129b713d86a); _sage_const_0xe41d8761370768aa9694b164c843dde9 = Integer(0xe41d8761370768aa9694b164c843dde9); _sage_const_0x5c0e90cf1b85ef039d00d4135ebafb96 = Integer(0x5c0e90cf1b85ef039d00d4135ebafb96); _sage_const_0xc2b44596292db4b088b85aed5c373a36 = Integer(0xc2b44596292db4b088b85aed5c373a36); _sage_const_0x08679ea474860ad8e37bc7a89673028a = Integer(0x08679ea474860ad8e37bc7a89673028a); _sage_const_0xc0d314f6dcbcda282d0113e9f5bf800c = Integer(0xc0d314f6dcbcda282d0113e9f5bf800c); _sage_const_0x07bc066ac9e9afb834673820f0b3dd0b = Integer(0x07bc066ac9e9afb834673820f0b3dd0b); _sage_const_0xd73c66a038cad6fc5916a48c8d93622c = Integer(0xd73c66a038cad6fc5916a48c8d93622c); _sage_const_0xb2ef02d32a36f5e9998fbe1698890cc2 = Integer(0xb2ef02d32a36f5e9998fbe1698890cc2); _sage_const_0x5c5f95fd18948f9e96127b21e78f827f = Integer(0x5c5f95fd18948f9e96127b21e78f827f); _sage_const_0xfa3312b976174edf358675a395fa303c = Integer(0xfa3312b976174edf358675a395fa303c); _sage_const_0x3f4f5751db0520531fa27ef37bb9b098 = Integer(0x3f4f5751db0520531fa27ef37bb9b098); _sage_const_0xf656c1dafef695dea1e67c7af0268acb = Integer(0xf656c1dafef695dea1e67c7af0268acb); _sage_const_0xcef1fbe4f0f29035929551131b88c077 = Integer(0xcef1fbe4f0f29035929551131b88c077); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0x7b6aa5d85e572983e6fb32a7cdebc140 = Integer(0x7b6aa5d85e572983e6fb32a7cdebc140); _sage_const_0x27b6916a894d3aee7106fe805fc34b44 = Integer(0x27b6916a894d3aee7106fe805fc34b44); _sage_const_0x83a4f1cf0bc0a0702c5b145a1d87f7ad = Integer(0x83a4f1cf0bc0a0702c5b145a1d87f7ad); _sage_const_0x2b81add91aee8a3d4c0b5aeff9e2e91f = Integer(0x2b81add91aee8a3d4c0b5aeff9e2e91f); _sage_const_0x5826ee0cadd89342809e9899289e2293 = Integer(0x5826ee0cadd89342809e9899289e2293); _sage_const_0xba746bd2a9fb7064dfad290428f8b4c1 = Integer(0xba746bd2a9fb7064dfad290428f8b4c1); _sage_const_0x65c27b7515bfcb99e2b3db84a9c4f06b = Integer(0x65c27b7515bfcb99e2b3db84a9c4f06b); _sage_const_0xe5f38190748b22fa5b5a5c4a70ae98c9 = Integer(0xe5f38190748b22fa5b5a5c4a70ae98c9); _sage_const_0x2b031af58bd0fca29347445ad100deac = Integer(0x2b031af58bd0fca29347445ad100deac); _sage_const_0x341f3fc18c76e37ba7c5bacbcda4926e = Integer(0x341f3fc18c76e37ba7c5bacbcda4926e); _sage_const_0xe2b7cbfc1998bed9cf9bfff9cfd8802b = Integer(0xe2b7cbfc1998bed9cf9bfff9cfd8802b); _sage_const_0x112558c42e14c26a65583fb951a2ec80 = Integer(0x112558c42e14c26a65583fb951a2ec80); _sage_const_0x6a1c74b3dafbe1cc4df1cc5252d215e2 = Integer(0x6a1c74b3dafbe1cc4df1cc5252d215e2); _sage_const_0xa4c979fff57bbed0145414d708efc92b = Integer(0xa4c979fff57bbed0145414d708efc92b)
from Crypto.Util.number import *

flag = (_sage_const_0xf31ce7cb1f2c6e7107318d76bdda50c5 , _sage_const_0x02d979fc3122bbaffcc1111953bc184f )

points = [
(_sage_const_0x77e035861860b2983de922db1bd78f97 , _sage_const_0xf9729a3afef0fd168948269fb696022c ),
(_sage_const_0x4cf5afcc9bc1db0118172129b713d86a , _sage_const_0xe41d8761370768aa9694b164c843dde9 ),
(_sage_const_0x5c0e90cf1b85ef039d00d4135ebafb96 , _sage_const_0xc2b44596292db4b088b85aed5c373a36 ),
(_sage_const_0x08679ea474860ad8e37bc7a89673028a , _sage_const_0xc0d314f6dcbcda282d0113e9f5bf800c ),
(_sage_const_0x07bc066ac9e9afb834673820f0b3dd0b , _sage_const_0xd73c66a038cad6fc5916a48c8d93622c ),
(_sage_const_0xb2ef02d32a36f5e9998fbe1698890cc2 , _sage_const_0x5c5f95fd18948f9e96127b21e78f827f ),
(_sage_const_0xfa3312b976174edf358675a395fa303c , _sage_const_0x3f4f5751db0520531fa27ef37bb9b098 ),
(_sage_const_0xf656c1dafef695dea1e67c7af0268acb , _sage_const_0xcef1fbe4f0f29035929551131b88c077 )
]

xs = []
ys = []
for i in points:
	xs.append(i[_sage_const_0 ])
	ys.append(i[_sage_const_1 ])

zs = []
for x, y in zip(xs, ys):
	zs.append(y ** _sage_const_2  - x ** _sage_const_3 )

zps = []
for i in range(len(zs) - _sage_const_1 ):
	zps.append(zs[i] - zs[i + _sage_const_1 ])

Ts = []
for i in range(len(zps) - _sage_const_1 ):
	Ts.append(zps[i] * (xs[i + _sage_const_1 ] - xs[i + _sage_const_2 ]) - zps[i + _sage_const_1 ] * (xs[i] - xs[i + _sage_const_1 ]))

p = gcd(Ts)
print("p: {}".format(hex(p)))

a = (zps[_sage_const_0 ] * inverse_mod(xs[_sage_const_0 ] - xs[_sage_const_1 ], p)) % p
print("a: {}".format(hex(a)))

b = (zs[_sage_const_0 ] - a * xs[_sage_const_0 ]) % p
print("b: {}".format(hex(b)))

F = GF(p)

for p in points:
	x = F(p[_sage_const_0 ])
	y = F(p[_sage_const_1 ])
	assert(y ** _sage_const_2  == x ** _sage_const_3  + a * x + b)

EC = EllipticCurve(F, [a, b])

# base point
g = (_sage_const_0x7b6aa5d85e572983e6fb32a7cdebc140 , _sage_const_0x27b6916a894d3aee7106fe805fc34b44 )

flagp_s = [
(_sage_const_0x83a4f1cf0bc0a0702c5b145a1d87f7ad , _sage_const_0x2b81add91aee8a3d4c0b5aeff9e2e91f ),
(_sage_const_0x5826ee0cadd89342809e9899289e2293 , _sage_const_0xba746bd2a9fb7064dfad290428f8b4c1 ),
(_sage_const_0x65c27b7515bfcb99e2b3db84a9c4f06b , _sage_const_0xe5f38190748b22fa5b5a5c4a70ae98c9 )
]
hellop_s = [
(_sage_const_0x2b031af58bd0fca29347445ad100deac , _sage_const_0x341f3fc18c76e37ba7c5bacbcda4926e ),
(_sage_const_0xe2b7cbfc1998bed9cf9bfff9cfd8802b , _sage_const_0x112558c42e14c26a65583fb951a2ec80 ),
(_sage_const_0x6a1c74b3dafbe1cc4df1cc5252d215e2 , _sage_const_0xa4c979fff57bbed0145414d708efc92b )
]

ak = []
pk = []
for flagp_, hellop_ in zip(flagp_s, hellop_s):
	T = []
	T.append(flagp_[_sage_const_1 ] ** _sage_const_2  - flagp_[_sage_const_0 ] ** _sage_const_3  - a * flagp_[_sage_const_0 ] - g[_sage_const_1 ] ** _sage_const_2  + g[_sage_const_0 ] ** _sage_const_3  + a * g[_sage_const_0 ])
	T.append(hellop_[_sage_const_1 ] ** _sage_const_2  - hellop_[_sage_const_0 ] ** _sage_const_3  - a * hellop_[_sage_const_0 ] - g[_sage_const_1 ] ** _sage_const_2  + g[_sage_const_0 ] ** _sage_const_3  + a * g[_sage_const_0 ])

	p_ = gcd(T)
	factors = factor(p_)
	print("p_: {} = {}".format(hex(p_), factors))

	b_ = (g[_sage_const_1 ] ** _sage_const_2  - g[_sage_const_0 ] ** _sage_const_3  - g[_sage_const_0 ] * a) % p_
	print("b_: {}".format(hex(b_)))

	print("")
	for fac, _ in factors:
		print("factor: {}".format(fac))
		E = EllipticCurve(Zmod(fac), [a, b_])
		P = E(g)
		ordg = P.order()
		print("	ordg: {}".format(ordg))
		Q = E(flagp_)
		m = discrete_log(Q, P, ordg, operation = "+")
		print("	m: {}".format(m))
		assert(m * P == Q)

		ak.append(m)
		pk.append(ordg)
	print("")

print("ak: {}".format(ak))
print("pk: {}".format(pk))
flag = crt(ak, pk)
print("flag: {}".format(flag))
print(long_to_bytes(flag))

